@attribute [Route(Routes.MixerScanner)]

@using Eggbox.Services
@using Eggbox.Models
@inject MixerConnectorService Connector

<div class="min-h-screen flex flex-col items-center justify-center bg-gray-100 p-4">
    <div class="w-full max-w-md p-6 rounded-3xl shadow-neumorphic bg-gray-100 text-center">
        <h1 class="text-2xl font-bold mb-4 text-gray-700">Let's find your mixer first!</h1>

        @if (isLoading)
        {
            <div class="animate-pulse text-gray-500">Zoeken naar mixers...</div>
        }
        else if (foundMixers.Count == 0)
        {
            <div class="text-red-500">No mixers have been found</div>
        }
        else
        {
            <div class="space-y-3 mt-4">
                @foreach (var mixer in foundMixers)
                {
                    <div class="p-4 rounded-2xl shadow-inner bg-gray-100 hover:shadow-neumorphic-light transition">
                        <div class="font-semibold text-gray-700">IP: @mixer.IpAddress</div>
                        <div class="text-sm text-gray-500 break-all">@mixer.RawResponse</div>
                        
                        <button @onclick="@(() => SelectMixer(mixer))">
                            Connect
                        </button>
                    </div>
                }
            </div>
        }

        <button @onclick="ScanMixers" class="mt-6 px-6 py-2 bg-gray-200 rounded-xl shadow-neumorphic hover:shadow-neumorphic-inset transition text-gray-700 font-semibold">
            Search again
        </button>
    </div>
</div>

@code {
    private bool isLoading = false;
    private List<MixerInfo> foundMixers = new();

    protected override async Task OnInitializedAsync()
    {
        await ScanMixers();
    }

    private async Task ScanMixers()
    {
        isLoading = true;
        foundMixers.Clear();
        StateHasChanged();

        foundMixers = await Connector.ScanAsync();

        isLoading = false;
        StateHasChanged();
    }
    
    private void SelectMixer(MixerInfo mixer)
    {
        Connector.Connect(mixer);
        NavManager.NavigateTo(Routes.Band);
    }
    

    private void SaveSelectedMixer(MixerInfo mixer)
    {
        Storage.Set(StorageKeys.LastMixer, mixer);
    }
}