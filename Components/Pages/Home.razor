@attribute [Route(Routes.Home)]
@using Eggbox.Services
@using Eggbox.Models
@using Optional
@using Eggbox.Extensions;
@inject MixerConnectorService Connector

<section class="h-screen py-5 bg-gradient-to-b from-primary to-primary-dark text-gray-200">
    <div class="container flex flex-col h-full">
        <article class="mt-32">
            <h1 class="text-white text-5xl font-bold font-fredoka text-center">EggBox</h1>
            <p class="mt-4 text-gray-100 text-center">
                Choose a mixer on your Wi-Fi network to connect with.
            </p>

            @_lastMixer.Render(lm =>
                @<div>
                    <div>
                        Previously connected
                    </div>
                    <MixerCard Mixer="lm" OnForget="ForgetLastMixer"/>
            </div>
            )

            @if (_hasScanned)
            {
                <div class="mt-20">
                    @foreach (var mixer in _foundMixers)
                    {
                        <MixerCard Mixer="mixer" />
                    }
                </div>
            }
        </article>
        <button @onclick="ScanMixers" class="mt-auto btn" disabled="@_isLoading">
            Search for mixers
            @if (_isLoading)
            {
                <i class="far fa-spinner animate-spin"></i>
            }
        </button>
    </div>
</section>

@code {
    private List<MixerInfo> _foundMixers = new();
    private Option<MixerInfo> _lastMixer;
    private bool _isLoading = false;
    private bool _hasScanned = false;

    private Task ForgetLastMixer(MixerInfo _)
    {
        Storage.Remove(StorageKeys.LastMixer);
        _lastMixer = Option.None<MixerInfo>();
        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        _lastMixer = LoadLastMixer();
    }

    private Option<MixerInfo> LoadLastMixer()
    {
        return Storage.Get(StorageKeys.LastMixer);
    }
    

    private async Task ScanMixers()
    {
        _hasScanned = true;
        _isLoading = true;
        _foundMixers.Clear();
        StateHasChanged();

        _foundMixers = await Connector.ScanAsync();

        _isLoading = false;
        StateHasChanged();
    }

}