@attribute [Route(Routes.Home)]
@using Eggbox.Services
@using Eggbox.Models
@using Optional
@using Microsoft.Extensions.Logging
@inject MixerConnectorService Connector
@inject ILogger<UdpOscClient> Logger

<section class="h-screen bg-gradient-to-b from-primary to-primary-dark text-gray-200">
    <div class="container flex flex-col h-full py-5 bg-[radial-gradient(#e5e7eb20_2px,transparent_2px)] [background-size:16px_16px]">
        <article class="mt-32">
            <h1 class="text-white text-6xl font-bold font-fredoka text-center mb-6">EggBox</h1>
            @if (_state == ConnectState.Connecting)
           {
               <p>Connecting...</p>
           }
           else if (_state == ConnectState.Connected)
           {
               <p>Connected to mixer!</p>
           }
           else if (_state == ConnectState.ScanRequired)
           {
               <p>Scanning...</p>
           }
           else if (_state == ConnectState.NoMixerFound)
           {
               <p>No mixers found. Make sure you're on the same Wi-Fi network.</p>
           } 
           else if (_state == ConnectState.MixersFound)
           {
               <div>
                   <p>Found mixers:</p>
                   @foreach (var mixer in _foundMixers)
                   {
                       <MixerCard Mixer="mixer"/>
                   }
               </div>
           } else if (_state == ConnectState.WifiMismatch)
           {
               <p class="text-red-400">
                   Your device is not on the same Wi-Fi network as the mixer. Please connect to the correct network.
               </p>
           }
           </article>
    </div>
</section>

@code {
    private ConnectState _state = ConnectState.Idle;
    private List<MixerInfo> _foundMixers = new();

    
    protected override async Task OnInitializedAsync()
    {
        Connector.OnConnectionStateChanged += state =>
        {
            _ = OnConnectionStateChangedAsync(state);
        };
        await Connector.TryAutoReconnectAsync();
    }

    private async Task OnConnectionStateChangedAsync(ConnectState state)
    {
        _state = state;
        if (state == ConnectState.ScanRequired)
        {
            await ScanMixers();
        }
        else if (state == ConnectState.Connected)
        {
            Connector.OnBusStateReceived += HandleBusStateReceived;
            Connector.InitializeBusState(6);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task ScanMixers()
    {
        if (_state == ConnectState.WifiMismatch)
            return;
        
        _state = ConnectState.Connecting;
        StateHasChanged();

        _foundMixers = await Connector.ScanViaBroadcast();

        _state = _foundMixers.Any() ? ConnectState.MixersFound : ConnectState.NoMixerFound;
        StateHasChanged();
    }
    private void HandleBusStateReceived()
    {
        Connector.OnBusStateReceived -= HandleBusStateReceived;

        // Check of er ooit channel names zijn ingevuld
        bool hasNames = Connector.BusNames.Values.Any(name => !string.IsNullOrWhiteSpace(name));

        if (hasNames)
        {
            NavManager.NavigateTo(Routes.Dashboard);
        }
        else
        {
            NavManager.NavigateTo(Routes.Band); // setup page
        }
    }
}